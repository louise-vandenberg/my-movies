[{"name":"Card","type":"CARD","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  if (B.env === 'dev') {\n    return <div className={classes.builderMode}>\n                      <div className={classes.heading}>\n                      *****************Heading Variable*****************\n                    </div>\n                    <div className={classes.imageC}>\n                        Image Variable\n                    </div>\n                    <div className={classes.subtitle1}>\n                       Genre Variable\n                    </div>\n                    <div className={classes.subtitle2}>\n                       Votes Variable\n                    </div>\n                    <div className={classes.description}>\n                    *******************Description Variable*******************\n                    </div>\n                   \n                    \n                </div>;\n  } else {\n    const heading = B.useText(options.headingVariable);\n    const image = B.useText(options.imageVariable);\n    let description = B.useText(options.descriptionVariable);\n    description = description.substring(0, 200) + \"...\";\n    const genre = B.useText(options.genreVariable);\n    const votes = B.useText(options.votesVariable);\n    const id = B.useText(options.idVariable);\n    const endpointId = options.EndpointId;\n    console.log(endpointId);\n    const getMoreLink = B.getEndpoint(endpointId);\n    console.log(getMoreLink.url);\n    let url = getMoreLink.url.substring(0, getMoreLink.url.indexOf(\":\"));\n    return <div className={classes.main}>\n                    <div className={classes.heading}>\n                        {heading}\n                    </div>\n                    <div className={classes.imageC}>\n                         <img className={classes.image} src={image}></img>\n                    </div>\n                    <div className={classes.subtitle1}>\n                        {genre}\n                    </div>\n                    <div className={classes.subtitle2}>\n                        {votes}\n                    </div>\n                    <div className={classes.description}>\n                       {description}\n                    </div>\n                    <div className={classes.footer}>\n                       <B.Link to={url + id}>View more</B.Link>\n                    </div>\n                    \n           </div>;\n  }\n})()","styles":"B => ({\n  typography\n}) => ({\n  builderMode: {\n    width: '100%',\n    textAlign: 'center',\n    color: 'black',\n    fontFamily: 'Arial Black',\n    fontSize: '25px',\n    padding: '20px',\n    background: 'aliceblue',\n    display: 'grid',\n    gridTemplateAreas: `\"content header header\" \n                            \"content subtitle1 subtitle2\" \n                            \"content description description\"\n                            \"content footer footer\"`,\n    border: 'solid black 5px'\n  },\n  main: {\n    backgroundColor: \"aliceblue\",\n    fontFamily: \"Raleway\",\n    padding: '15px',\n    boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n    display: 'grid',\n    gridGap: '20px',\n    gridTemplateAreas: `\"content header header\" \n                                 \"content subtitle1 subtitle2\" \n                                 \"content description description\"\n                                 \"content footer footer\"`,\n    [`@media (max-height: 813px)`]: {\n      gridTemplateAreas: `\"content content\" \n                    \"header header\" \n                    \"subtitle1 subtitle2\"\n                    \"description description\"\n                    \"footer footer\"`\n    }\n  },\n  heading: {\n    gridArea: 'header',\n    fontSize: '20px',\n    fontWeight: 'bold',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '18px'\n    }\n  },\n  imageC: {\n    gridArea: 'content',\n    justifySelf: 'center'\n  },\n  image: {\n    height: '250px',\n    width: '200px',\n    [`@media (max-height: 813px)`]: {\n      width: '150px',\n      height: '120px'\n    }\n  },\n  subtitle1: {\n    gridArea: 'subtitle1',\n    fontSize: '15px',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '12px'\n    }\n  },\n  subtitle2: {\n    gridArea: 'subtitle2',\n    fontSize: '15px',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '12px'\n    }\n  },\n  description: {\n    gridArea: 'description',\n    fontSize: '17px',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '14px'\n    }\n  },\n  footer: {\n    gridArea: 'footer',\n    fontSize: '15px',\n    justifySelf: 'end',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '12px'\n    }\n  }\n})"},{"name":"CardContainer","type":"ROW","allowedTypes":["CARD"],"orientation":"HORIZONTAL","jsx":"(() => {\n  if (B.env === 'dev') {\n    return <div className={classes.builderMode}>\n                    {children.length < 1 ? \"Card Container\" : children}\n                </div>;\n  } else {\n    const {\n      GetAll\n    } = B;\n    const {\n      modelId\n    } = options;\n    return <div className={classes.root}>\n                    <GetAll modelId={modelId}>\n                        {({\n          loading,\n          error,\n          data,\n          refetch\n        }) => {\n          if (loading) {\n            return <div>Loading</div>;\n          }\n\n          if (error) {\n            return <div>Error: {error.message}</div>;\n          }\n\n          const {\n            results\n          } = data;\n          return <div className={classes.container}>\n                                {results.map(item => <div className={classes.cardGrid}>\n                                    <B.GetOneProvider key={item.id} value={item}>\n                                        {children}\n                                    </B.GetOneProvider>\n                                  </div>)}\n                                  <div className={classes.cardGrid}></div>\n                                  <div className={classes.cardGrid}></div>\n                                  <div className={classes.cardGrid}></div>\n                            </div>;\n        }}\n                    </GetAll>\n                </div>;\n  }\n})()","styles":"B => ({\n  typography\n}) => ({\n  builderMode: {\n    width: '100%',\n    textAlign: 'center',\n    height: '300px',\n    top: '30px',\n    color: 'white',\n    fontFamily: 'Arial Black',\n    fontSize: '25px',\n    padding: '20px',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)'\n  },\n  root: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    display: 'block',\n    overflow: 'auto',\n    height: '100%'\n  },\n  container: {\n    padding: '70px 5% 5% 5%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    // '&::after': {\n    //   content: \"''\",\n    //   flex:'auto'\n    // },\n    [`@media (max-height: 813px)`]: {\n      padding: '70px 10px 50px 10px'\n    }\n  },\n  cardGrid: {\n    padding: '10px',\n    width: '500px',\n    height: '284px',\n    [`@media (max-height: 813px)`]: {\n      width: '280px',\n      height: '380px'\n    }\n  }\n})"},{"name":"CardDetails","type":"ROW","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  if (B.env === 'dev') {\n    return <div className={classes.builderMode}>\n                    Card Details\n                </div>;\n  } else {\n    const {\n      getVariable\n    } = B;\n    const {\n      movieId,\n      modelId\n    } = options;\n    const variable = getVariable(movieId[1].id);\n    let id;\n\n    if (variable) {\n      const params = useParams();\n      const value = params[variable.name];\n      id = parseInt(value, 10);\n    }\n\n    return <div className={classes.main}>\n                    {\n        /* <B.GetOne modelId={modelId} byId={5}> */\n      }\n                    <B.GetOne modelId={modelId} byId={id}>\n                    {({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) {\n            return <span>Loading...</span>;\n          }\n\n          if (error) {\n            return <span>Something went wrong: {error.message} :(</span>;\n          }\n\n          const {\n            id\n          } = data;\n          const url = \"https://my-movies-developer.bettywebblocks.com/movies/delete/\";\n          return <div className={classes.root}>\n                           \n                            <div className={classes.heading}>\n                                 {data.title}\n                            </div>\n                            <div className={classes.imageC}>\n                                <img className={classes.image} src={data.image}></img>\n                            </div>\n                            <div className={classes.subtitle1}>\n                                {data.genre}\n                            </div>\n                            <div className={classes.subtitle2}>\n                                {data.votes}\n                            </div>\n                            <div className={classes.description}>\n                                 {data.description}\n                            </div>\n                            <div className={classes.footer}>\n                                 <button className={classes.buttons}>Upvote</button>\n                                 <button className={classes.buttons}>Edit</button>\n                                \n                                 <form className={classes.form} action={url + data.id} method=\"post\" enctype=\"multipart/form-data\">\n                                      \n                                     <button className={classes.buttons}>Delete</button>\n                                </form>\n                               \n                            </div>\n                            </div>;\n        }}\n                </B.GetOne>\n                </div>;\n  }\n})()","styles":"B => ({\n  typography\n}) => ({\n  builderMode: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    height: '400px',\n    color: 'white',\n    fontSize: '20px',\n    textAlign: 'center'\n  },\n  main: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    // display: 'block',\n    // overflow: 'auto',\n    height: '100%',\n    // width: '100%',\n    textAlign: 'center'\n  },\n  root: {\n    backgroundColor: \"aliceblue\",\n    fontFamily: \"Raleway\",\n    margin: '70px 10% 40px 10%',\n    // maxWidth: '800px',\n    padding: '40px',\n    boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n    display: 'grid',\n    justifyItems: 'center',\n    gridTemplateAreas: `\"content header\" \n                               \"content subtitle1\" \n                               \"content subtitle2\"\n                               \"content description\"\n                               \"content footer\"`,\n    [`@media (max-height: 813px)`]: {\n      gridTemplateAreas: `\"content\" \n                  \"content\"\n                  \"header\" \n                  \"subtitle1\"\n                  \"subtitle2\"\n                  \"description\"\n                  \"footer\"`\n    }\n  },\n  heading: {\n    gridArea: 'header',\n    fontSize: '40px',\n    fontWeight: 'bold',\n    justifySelf: 'center',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '18px'\n    }\n  },\n  imageC: {\n    gridArea: 'content',\n    justifySelf: 'center',\n    marginRight: '40px',\n    [`@media (max-height: 813px)`]: {\n      marginRight: '0px'\n    }\n  },\n  image: {\n    height: '450px',\n    width: '300px',\n    [`@media (max-height: 813px)`]: {\n      height: '200px',\n      width: '150px' // width: '150px',\n      // height: '100px',\n      // marginRight: '20px',\n      // justifySelf: 'center',\n\n    }\n  },\n  subtitle1: {\n    gridArea: 'subtitle1',\n    fontSize: '25px',\n    justifySelf: 'center',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '12px'\n    }\n  },\n  subtitle2: {\n    gridArea: 'subtitle2',\n    fontSize: '25px',\n    justifySelf: 'center',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '12px'\n    }\n  },\n  description: {\n    gridArea: 'description',\n    fontSize: '20px',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '14px'\n    }\n  },\n  footer: {\n    gridArea: 'footer',\n    fontSize: '20px',\n    justifySelf: 'end',\n    display: 'inline',\n    [`@media (max-height: 813px)`]: {\n      fontSize: '12px',\n      justifySelf: 'center'\n    }\n  },\n  form: {\n    display: 'inline'\n  },\n  buttons: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    color: 'white',\n    fontSize: '14px',\n    padding: '10px',\n    fontWeight: 'bold',\n    marginLeft: '5px',\n    \"&:hover\": {\n      background: 'black',\n      textDecoration: 'none',\n      cursor: 'pointer'\n    },\n    [`@media (max-height: 813px)`]: {\n      fontSize: '12px',\n      padding: '8px',\n      justifySelf: 'center',\n      marginTop: '10px'\n    }\n  }\n})"},{"name":"CreateNew","type":"ROW","allowedTypes":["CARD"],"orientation":"HORIZONTAL","jsx":"(() => {\n  if (B.env === 'dev') {\n    return <div className={classes.builderMode}>\n                    Create New\n                </div>;\n  } else {\n    const {\n      propertyId,\n      modelId\n    } = options;\n    const {\n      getProperty,\n      getModel\n    } = B;\n    const modelObj = getModel(modelId);\n    const url = \"https://my-movies-developer.bettywebblocks.com/\" + modelObj.name + \"/new\";\n    console.log(url);\n    return <div className={classes.main}>\n                   <div className={classes.root}>\n                       <h1>Create new movie</h1>\n                       <br />\n                       <form action={url} method=\"post\" enctype=\"multipart/form-data\">\n                            {propertyId.map(property => {\n            const name = getProperty(property).name; // name=\"dto_blog[tags]\n\n            return <div className={classes.new}>\n                                                <label className={classes.label}>{name}</label>\n                                                <input className={classes.inputBox} type=\"text\" name={name} id=\"id\"></input>\n                                            </div>;\n          })}\n                                <button className={classes.button}>Submit</button>\n                       </form>\n                      \n                   </div>\n                </div>;\n  }\n})()","styles":"B => ({\n  typography\n}) => ({\n  builderMode: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    height: '200px',\n    color: 'white',\n    fontSize: '20px',\n    textAlign: 'center'\n  },\n  main: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    height: '100%' // textAlign: 'center',\n\n  },\n  root: {\n    backgroundColor: \"aliceblue\",\n    fontFamily: \"Raleway\",\n    margin: '70px 10% 40px 10%',\n    padding: '40px',\n    boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n    [`@media (max-height: 813px)`]: {\n      fontSize: '20px'\n    }\n  },\n  new: {\n    textTransform: 'capitalize',\n    display: 'grid',\n    gridTemplateColumns: '20% auto',\n    paddingBottom: '15px',\n    [`@media (max-height: 813px)`]: {\n      gridTemplateColumns: '30% auto'\n    }\n  },\n  label: {\n    [`@media (max-height: 813px)`]: {\n      fontSize: '14px'\n    }\n  },\n  inputBox: {\n    // height: '30px',\n    padding: '10px',\n    fontSize: '16px',\n    [`@media (max-height: 813px)`]: {\n      padding: '7px',\n      fontSize: '14px'\n    }\n  },\n  button: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    border: 'none',\n    color: 'white',\n    padding: '15px 32px',\n    textAlign: 'center',\n    textDecoration: 'none',\n    display: 'block',\n    fontSize: '16px',\n    marginRight: '0',\n    marginLeft: 'auto',\n    [`@media (max-height: 813px)`]: {\n      padding: '10px 27px',\n      fontSize: '12px'\n    }\n  }\n})"},{"name":"Edit","type":"ROW","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  if (B.env === 'dev') {\n    return <div className={classes.builderMode}>\n                    Edit\n                </div>;\n  } else {\n    const {\n      propertyId,\n      modelId\n    } = options;\n    const {\n      getProperty,\n      getModel,\n      GetOne\n    } = B;\n    const modelObj = getModel(modelId);\n    const movieId = 1;\n    const url = \"https://my-movies-developer.bettywebblocks.com/\" + modelObj.name + \"/edit/\" + movieId;\n\n    const MyForm = props => {\n      const [state, setState] = useState(props.data);\n      return <form action={url} method=\"post\" enctype=\"multipart/form-data\">\n                         {propertyId.map(property => {\n          const name = getProperty(property).name; // console.log(state[name]);\n\n          return <div className={classes.new}>\n                                   <label className={classes.label}>{name}</label>\n                                   <input className={classes.inputBox} value={state[name]} type=\"text\" name={name} id=\"id\" onChange={event => {\n              let newValue = event.target.value;\n              setState(prev => ({ ...prev,\n                [name]: newValue\n              }));\n            }} />\n                                </div>;\n        })}\n                                <button className={classes.button}>Submit</button>\n                       \n                    </form>;\n    };\n\n    return <div className={classes.main}>\n                   <div className={classes.root}>\n                       <h1>Edit movie</h1>\n                       <br />\n                       {\n          /* <Input propertyId={propertyId} /> */\n        }\n                       <GetOne modelId={modelId} byId={movieId}>\n                           {({\n            loading,\n            error,\n            data\n          }) => {\n            if (loading) {\n              return <span>Loading....</span>;\n            }\n\n            if (error) {\n              return <span>Something went wrong: {error.message}</span>;\n            }\n\n            return <MyForm data={data} />;\n          }}\n                      \n                       </GetOne>\n                   </div>\n                </div>;\n  }\n})()","styles":"B => ({\n  typography\n}) => ({\n  builderMode: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    height: '200px',\n    color: 'white',\n    fontSize: '20px',\n    textAlign: 'center'\n  },\n  main: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    height: '100%' // textAlign: 'center',\n\n  },\n  root: {\n    backgroundColor: \"aliceblue\",\n    fontFamily: \"Raleway\",\n    margin: '70px 10% 40px 10%',\n    padding: '40px',\n    boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n    [`@media (max-height: 813px)`]: {\n      fontSize: '20px'\n    }\n  },\n  new: {\n    textTransform: 'capitalize',\n    display: 'grid',\n    gridTemplateColumns: '20% auto',\n    paddingBottom: '15px',\n    [`@media (max-height: 813px)`]: {\n      gridTemplateColumns: '30% auto'\n    }\n  },\n  label: {\n    [`@media (max-height: 813px)`]: {\n      fontSize: '14px'\n    }\n  },\n  inputBox: {\n    // height: '30px',\n    padding: '10px',\n    fontSize: '16px',\n    [`@media (max-height: 813px)`]: {\n      padding: '7px',\n      fontSize: '14px'\n    }\n  },\n  button: {\n    background: 'rgb(2,0,36)',\n    background: 'linear-gradient(90deg, rgba(50,3,3,1) 0%, rgba(121,9,9,1) 47%, rgba(205,54,54,1) 100%)',\n    border: 'none',\n    color: 'white',\n    padding: '15px 32px',\n    textAlign: 'center',\n    textDecoration: 'none',\n    display: 'block',\n    fontSize: '16px',\n    marginRight: '0',\n    marginLeft: 'auto',\n    [`@media (max-height: 813px)`]: {\n      padding: '10px 27px',\n      fontSize: '12px'\n    }\n  }\n})"},{"name":"Landingpage","type":"ROW","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n          <div className={classes.container}>\n              <div className={classes.content}>\n                  <h1 className={classes.heading}>Movies</h1>\n                 <h3 className={classes.subHeading}>Welcome to my movie app, created using page builder</h3>\n                  <B.Link endpointId={options.endpointId}><button className={classes.btn}>View</button></B.Link>\n              </div>\n              \n          </div>\n    </div>","styles":"B => ({\n  typography\n}) => ({\n  root: {\n    height: '100%',\n    width: '100%',\n    backgroundImage: \"url('https://images.unsplash.com/photo-1507924538820-ede94a04019d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2700&q=80')\",\n    backgroundRepeat: 'no-repeat',\n    backgroundAttachment: 'fixed',\n    backgroundPosition: 'center',\n    fontFamily: 'Arial Black'\n  },\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '35%',\n    width: '100%',\n    backgroundImage: \"url('https://images.unsplash.com/photo-1524985069026-dd778a71c7b4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2702&q=80')\",\n    backgroundRepeat: 'no-repeat',\n    backgroundAttachment: 'fixed',\n    backgroundPosition: 'center',\n    boxShadow: \"0 0 8px 8px #6e1414 inset\",\n    [`@media (max-height: 813px) and (max-width: 1317px)`]: {\n      height: '50%'\n    }\n  },\n  content: {\n    color: 'white',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  heading: {\n    color: 'white',\n    fontSize: '40px',\n    textShadow: '2px 2px 4px #000000',\n    [`@media (max-height: 813px) and (max-width: 1317px)`]: {\n      fontSize: '25px'\n    }\n  },\n  subHeading: {\n    textAlign: 'center',\n    [`@media (max-height: 813px) and (max-width: 1317px)`]: {\n      fontSize: '15px'\n    }\n  },\n  btn: {\n    backgroundColor: '#6e1414',\n    border: 'none',\n    color: 'white',\n    padding: '15px 32px',\n    textAlign: 'center',\n    textDecoration: 'none',\n    display: 'inline-block',\n    fontSize: '16px',\n    borderRadius: '10px',\n    cursor: 'pointer',\n    marginTop: '30px',\n    marginBottom: '30px',\n    [`@media (max-height: 813px) and (max-width: 1317px)`]: {\n      fontSize: '15px'\n    }\n  }\n})"},{"name":"Navbar","type":"ROW","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  if (B.env === 'dev') {\n    return <div className={classes.builderMode}>\n                    Navbar\n                </div>;\n  } else {\n    const {\n      HomeEndpoint,\n      MoviesEndpoint,\n      CreateEndpoint\n    } = options;\n    return <div className={classes.root}>\n                    <li className={classes.link}>\n                        <B.Link endpointId={HomeEndpoint} className={classes.linkItem}>Home</B.Link>\n                    </li>\n                    <li className={classes.link}>\n                        <B.Link endpointId={MoviesEndpoint} className={classes.linkItem}>Movies</B.Link>\n                    </li>\n                    <li className={classes.link}>\n                         <B.Link endpointId={CreateEndpoint} className={classes.linkItem}>New Movie</B.Link>\n                    </li>\n                  \n                </div>;\n  }\n})()","styles":"B => ({\n  typography\n}) => ({\n  builderMode: {\n    width: '100%',\n    border: '1px solid #ccc',\n    textAlign: 'center',\n    height: '30px',\n    background: 'black',\n    color: 'white',\n    fontFamily: 'Arial Black',\n    fontSize: '20px',\n    padding: '20px'\n  },\n  root: {\n    background: 'black',\n    position: 'fixed',\n    top: '0',\n    width: '100%',\n    padding: '20px',\n    height: '30px',\n    textAlign: 'center',\n    [`@media (max-height: 813px)`]: {\n      height: '20px',\n      padding: '15px'\n    }\n  },\n  link: {\n    listStyleType: 'none',\n    display: 'inline',\n    paddingRight: '50px',\n    [`@media (max-height: 813px)`]: {\n      padding: '10px'\n    }\n  },\n  linkItem: {\n    textDecoration: 'none',\n    color: 'white',\n    fontFamily: 'Arial Black',\n    fontSize: '25px',\n    background: 'rgba(121,9,9,1)',\n    padding: '5px',\n    borderRadius: '5px',\n    boxShadow: \"0 0 8px 8px #6e1414 inset\",\n    [`@media (max-height: 813px)`]: {\n      fontSize: '15px'\n    }\n  }\n})"}]
